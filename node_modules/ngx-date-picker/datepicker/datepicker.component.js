import { Component, EventEmitter, Input, Output, ViewChild, forwardRef, ViewContainerRef, Renderer, ElementRef, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatePickerInnerComponent } from './datepicker-inner.component';
import { DatepickerConfig } from './datepicker.config';
import { DropdownState } from './dropdown.state';
import { ComponentLoaderFactory } from '../component-loader/component-loader.factory';
import { DropdownContainerComponent } from './dropdown-container.component';
import { DateFormatter } from './date-formatter';
import moment from 'moment';
export var DATEPICKER_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DatePickerComponent; }),
    multi: true
};
/* tslint:disable:component-selector-name component-selector-type */
/* tslint:enable:component-selector-name component-selector-type */
export var DatePickerComponent = (function () {
    function DatePickerComponent(config, _elementRef, _renderer, _viewContainerRef, _cis, _state) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._viewContainerRef = _viewContainerRef;
        this._cis = _cis;
        this._state = _state;
        this.placeholder = '';
        /** sets datepicker mode, supports: `day`, `month`, `year` */
        this.datepickerMode = 'day';
        /** if false week numbers will be hidden */
        this.showWeeks = false;
        this.displayFormat = 'MMM D, YYYY';
        /** set datepicker type, supports: `date`, `datetime` */
        this.type = 'date';
        this.selectionDone = new EventEmitter(undefined);
        /** callback to invoke when the activeDate is changed. */
        this.activeDateChange = new EventEmitter(undefined);
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this._now = new Date();
        this._subscriptions = [];
        this.dateFormatter = new DateFormatter();
        this.config = config;
        this.configureOptions();
        this._dropdown = this._cis
            .createLoader(this._elementRef, this._viewContainerRef, this._renderer)
            .provide({ provide: DropdownState, useValue: this._state });
    }
    Object.defineProperty(DatePickerComponent.prototype, "activeDate", {
        /** currently active date */
        get: function () {
            return this._activeDate || this._now;
        },
        set: function (value) {
            this._activeDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "disabled", {
        get: function () {
            return this._isDisabled;
        },
        set: function (value) {
            this._isDisabled = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (value) {
            this._required = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        set: function (value) {
            this._readonly = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    DatePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._subscriptions.push(this._state
            .toggleClick.subscribe(function (value) {
            _this.toggle(value);
        }));
        this._subscriptions.push(this._state
            .dropdownMenu.subscribe(function (_datePicker) {
            _datePicker.select(_this.activeDate, false);
        }));
    };
    DatePickerComponent.prototype.ngOnDestroy = function () {
        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {
            var sub = _a[_i];
            sub.unsubscribe();
        }
        this._dropdown.dispose();
    };
    DatePickerComponent.prototype.configureOptions = function () {
        Object.assign(this, this.config);
    };
    DatePickerComponent.prototype.onUpdate = function (event) {
        this.activeDate = event.date;
        var ouputDate = moment(event.date);
        if (typeof event.timezone === 'number') {
            this.timezone = event.timezone;
            ouputDate.utcOffset(event.timezone, true);
        }
        this.onChange(ouputDate.format(this.config.ouputFormat));
    };
    DatePickerComponent.prototype.onSelectionDone = function (event) {
        this.activeDate = event.date;
        var ouputDate = moment(event.date);
        if (typeof event.timezone === 'number') {
            this.timezone = event.timezone;
            ouputDate.utcOffset(event.timezone, true);
        }
        this.selectionDone.emit(ouputDate.format(this.config.ouputFormat));
        this.onChange(ouputDate.format(this.config.ouputFormat));
        this.hide();
    };
    DatePickerComponent.prototype.onActiveDateChange = function (event) {
        this.activeDateChange.emit(event);
    };
    DatePickerComponent.prototype.writeValue = function (value) {
        if (value && value instanceof Date) {
            this.activeDate = value;
            return;
        }
        if (!this.isEmpty(value)) {
            this.activeDate = this.dateFormatter.toDate(value);
            // this.timezone = this.dateFormatter.getTimezone(value) || this.config.timeZone;
            var currentDate = moment.parseZone(value);
            this.timezone = currentDate.utcOffset();
        }
        else {
            this.activeDate = void 0;
        }
    };
    DatePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    DatePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    DatePickerComponent.prototype.displayDate = function () {
        if (this._activeDate) {
            var displayDate = moment(this._activeDate);
            if (typeof this.timezone === 'number') {
                displayDate.utcOffset(this.timezone, true);
            }
            return displayDate.format(this.displayFormat);
        }
        else {
            return '';
        }
    };
    DatePickerComponent.prototype.toggle = function (value) {
        if ((this.isOpen && this._dropdown.isShown) || value === false) {
            return this.hide();
        }
        return this.show();
    };
    DatePickerComponent.prototype.show = function () {
        if (this.disabled || this.readonly) {
            return;
        }
        if (this._dropdown.isShown) {
            return;
        }
        this._dropdown
            .attach(DropdownContainerComponent)
            .to('body')
            .position({ attachment: 'bottom right' })
            .show({
            content: this.dropdownRef,
            placement: 'bottom right'
        });
        this._state.isOpenChange.emit(true);
        this.isOpen = true;
    };
    DatePickerComponent.prototype.hide = function () {
        this._dropdown.hide();
        this._state.isOpenChange.emit(false);
        this.isOpen = false;
    };
    DatePickerComponent.prototype.onDocumentClick = function (event) {
        if (event.button !== 2 && this._dropdown.isShown &&
            !this._elementRef.nativeElement.contains(event.target) &&
            !this.dropdownMenu.nativeElement.contains(event.target)) {
            this._state.toggleClick.emit(false);
        }
    };
    DatePickerComponent.prototype.coerceBooleanProperty = function (value) {
        return value != null && '' + value !== 'false';
    };
    DatePickerComponent.prototype.isEmpty = function (value) {
        if (value === null) {
            return true;
        }
        if (typeof value === 'string') {
            return value.length === 0;
        }
        return !value;
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-datepicker',
                    template: "\n    <div class=\"input-group\">\n      <input class=\"form-control\" [placeholder]=\"placeholder\" readonly [value]=\"displayDate()\"\n             [disabled]=\"disabled\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\"\n             [class.ready]=\"!disabled && !readonly\">\n      <div class=\"input-group-btn\">\n        <button type=\"button\" class=\"btn btn-default\" [disabled]=\"disabled || readonly\" (click)=\"toggle()\">\n          <i class=\"glyphicon glyphicon-calendar\"></i>\n        </button>\n      </div>\n    </div>\n    <template #dropdownRef>\n      <div class=\"dropdown-menu dropdown-menu-right\" #dropdownMenu>\n        <datepicker-inner [activeDate]=\"activeDate\"\n                          (update)=\"onUpdate($event)\"\n                          [type]=\"type\"\n                          [timezone]=\"timezone\"\n                          [datepickerMode]=\"datepickerMode\"\n                          [initDate]=\"initDate\"\n                          [minDate]=\"minDate\"\n                          [maxDate]=\"maxDate\"\n                          [minMode]=\"minMode\"\n                          [maxMode]=\"maxMode\"\n                          [showWeeks]=\"showWeeks\"\n                          [formatDay]=\"formatDay\"\n                          [formatMonth]=\"formatMonth\"\n                          [formatYear]=\"formatYear\"\n                          [formatDayHeader]=\"formatDayHeader\"\n                          [formatDayTitle]=\"formatDayTitle\"\n                          [formatMonthTitle]=\"formatMonthTitle\"\n                          [startingDay]=\"startingDay\"\n                          [yearRange]=\"yearRange\"\n                          [customClass]=\"customClass\"\n                          [dateDisabled]=\"dateDisabled\"\n                          [onlyCurrentMonth]=\"onlyCurrentMonth\"\n                          [shortcutPropagation]=\"shortcutPropagation\"\n                          [monthColLimit]=\"monthColLimit\"\n                          [yearColLimit]=\"yearColLimit\"\n                          (selectionDone)=\"onSelectionDone($event)\"\n                          (activeDateChange)=\"onActiveDateChange($event)\">\n          <daypicker tabindex=\"0\"></daypicker>\n          <monthpicker tabindex=\"0\"></monthpicker>\n          <yearpicker tabindex=\"0\"></yearpicker>\n          <timepicker tabindex=\"0\"></timepicker>\n          <timezonepicker tabindex=\"0\"></timezonepicker>\n        </datepicker-inner>\n      </div>\n    </template>\n  ",
                    providers: [DATEPICKER_CONTROL_VALUE_ACCESSOR],
                    styles: ["\n    .dropdown-menu {\n      padding: 0;\n    }\n\n    .glyphicon {\n      font-size: 12px;\n    }\n\n    input.form-control {\n      padding: 6px 20px 6px 12px;\n    }\n\n    input.form-control.ready {\n      background-color: #fff;\n    }\n\n    :host {\n      display: block;\n      position: relative;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: DatepickerConfig, },
        { type: ElementRef, },
        { type: Renderer, },
        { type: ViewContainerRef, },
        { type: ComponentLoaderFactory, },
        { type: DropdownState, },
    ]; };
    DatePickerComponent.propDecorators = {
        'placeholder': [{ type: Input },],
        'datepickerMode': [{ type: Input },],
        'initDate': [{ type: Input },],
        'minDate': [{ type: Input },],
        'maxDate': [{ type: Input },],
        'minMode': [{ type: Input },],
        'maxMode': [{ type: Input },],
        'showWeeks': [{ type: Input },],
        'displayFormat': [{ type: Input },],
        'formatDay': [{ type: Input },],
        'formatMonth': [{ type: Input },],
        'formatYear': [{ type: Input },],
        'formatDayHeader': [{ type: Input },],
        'formatDayTitle': [{ type: Input },],
        'formatMonthTitle': [{ type: Input },],
        'startingDay': [{ type: Input },],
        'yearRange': [{ type: Input },],
        'onlyCurrentMonth': [{ type: Input },],
        'shortcutPropagation': [{ type: Input },],
        'monthColLimit': [{ type: Input },],
        'yearColLimit': [{ type: Input },],
        'customClass': [{ type: Input },],
        'dateDisabled': [{ type: Input },],
        'type': [{ type: Input },],
        'activeDate': [{ type: Input },],
        'disabled': [{ type: Input },],
        'required': [{ type: Input },],
        'readonly': [{ type: Input },],
        'selectionDone': [{ type: Output },],
        'activeDateChange': [{ type: Output },],
        '_datePicker': [{ type: ViewChild, args: [DatePickerInnerComponent,] },],
        'dropdownRef': [{ type: ViewChild, args: ['dropdownRef',] },],
        'dropdownMenu': [{ type: ViewChild, args: ['dropdownMenu',] },],
        'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event'],] },],
    };
    return DatePickerComponent;
}());
//# sourceMappingURL=datepicker.component.js.map