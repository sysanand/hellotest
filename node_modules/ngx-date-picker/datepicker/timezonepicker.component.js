import { Component } from '@angular/core';
import { DatePickerInnerComponent } from './datepicker-inner.component';
import { DatepickerConfig } from './datepicker.config';
import moment from 'moment';
// write an interface for template options
var TEMPLATE_OPTIONS = {
    'bs4': {
        ARROW_LEFT: '&lt;',
        ARROW_RIGHT: '&gt;'
    },
    'bs3': {
        ARROW_LEFT: "\n    <i class=\"glyphicon glyphicon-chevron-left\"></i>\n    ",
        ARROW_RIGHT: "\n    <i class=\"glyphicon glyphicon-chevron-right\"></i>\n    "
    }
};
export var TimezonePickerComponent = (function () {
    function TimezonePickerComponent(datePicker, config) {
        var _this = this;
        this.minPos = 0;
        this.timeZones = [];
        this.datePicker = datePicker;
        var timezoneArray = config.timeZones || [];
        this.timeZones = timezoneArray.map(function (zone) {
            return _this.createTimezoneObject(zone);
        });
    }
    TimezonePickerComponent.prototype.ngOnInit = function () {
        var self = this;
        this.datePicker.setRefreshViewHandler(function () {
            var timezone = this.timezone || 0;
            var index = self.timeZones.findIndex(function (zone) {
                if (zone.zone === timezone || (timezone / 60) === zone.zone) {
                    return true;
                }
            });
            if (self.minPos >= 0 && self.maxPos >= 0 && self.minPos <= index && index <= self.maxPos) {
                return;
            }
            if (index !== -1) {
                self.displayTimeZones = [];
                self.displayTimeZones.push(self.clone(self.timeZones[index]));
                var reverse = index - 1;
                self.minPos = index;
                while (reverse >= 0 && reverse >= index - 2) {
                    self.displayTimeZones.unshift(self.clone(self.timeZones[reverse]));
                    self.minPos = reverse;
                    reverse--;
                }
                var next = index + 1;
                self.maxPos = index;
                while (self.timeZones[next] && self.displayTimeZones.length < 5) {
                    self.displayTimeZones.push(self.clone(self.timeZones[next]));
                    self.maxPos = next;
                    next++;
                }
            }
            else {
                self.displayTimeZones = [];
                var counter = 0;
                self.minPos = 0;
                while (counter < 5 && self.timeZones[counter]) {
                    self.displayTimeZones.push(self.clone(self.timeZones[counter]));
                    counter++;
                }
                self.maxPos = self.displayTimeZones.length - 1;
            }
        }, 'timezone');
        this.datePicker.refreshView();
    };
    TimezonePickerComponent.prototype.move = function (event, direction) {
        event.stopPropagation();
        switch (direction) {
            case 'prev':
                if (this.displayTimeZones.length === 5) {
                    this.displayTimeZones.pop();
                    this.maxPos--;
                }
                this.displayTimeZones.unshift(this.clone(this.timeZones[--this.minPos]));
                break;
            case 'next':
                this.displayTimeZones.shift();
                this.minPos++;
                this.displayTimeZones.push(this.clone(this.timeZones[++this.maxPos]));
                break;
            default:
                break;
        }
    };
    TimezonePickerComponent.prototype.setTimezone = function (event, zone) {
        event.stopPropagation();
        var currentDate = moment(this.datePicker.activeDate);
        if (this.datePicker.timezone) {
            currentDate.utcOffset(this.datePicker.timezone, true);
        }
        else {
            currentDate.utcOffset(0, true);
        }
        this.datePicker.timezone = zone;
        currentDate.utcOffset(this.datePicker.timezone);
        var newDate = new Date(parseInt(currentDate.format('YYYY')), parseInt(currentDate.format('MM')) - 1, parseInt(currentDate.format('DD')), parseInt(currentDate.format('H')), parseInt(currentDate.format('m')));
        this.datePicker.select(newDate, false);
    };
    TimezonePickerComponent.prototype.createTimezoneObject = function (zone) {
        var dateObject = {};
        dateObject.zone = zone.zone;
        dateObject.label = zone.label;
        dateObject.selected = this.datePicker.timezone === zone.zone;
        return dateObject;
    };
    TimezonePickerComponent.prototype.isActive = function (zone) {
        return this.datePicker.timezone === zone || (this.datePicker.timezone / 60) === zone;
    };
    TimezonePickerComponent.prototype.clone = function (value) {
        return JSON.parse(JSON.stringify(value));
    };
    TimezonePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'timezonepicker',
                    template: "\n    <table *ngIf=\"datePicker.type ==='datetime'\" style=\"width: 100%; border-top: 1px solid #eee;\">\n      <thead>\n      <tr>\n        <th>\n          <button type=\"button\" [disabled]=\"minPos == 0\"\n                  class=\"btn btn-default btn-secondary btn-sm pull-left\"\n                  (click)=\"move($event, 'prev')\"\n                  tabindex=\"-1\">\n            <i class=\"glyphicon glyphicon-chevron-left\"></i>\n          </button>\n        </th>\n        <th *ngFor=\"let tz of displayTimeZones\">\n          <button type=\"button\" style=\"min-width:100%;\" class=\"btn btn-sm\"\n                  [ngClass]=\"{'btn-info': tz.selected, active: !isBs4 && isActive(tz.zone), 'btn-default': !isBs4}\"\n                  (click)=\"setTimezone($event, tz.zone)\" tabindex=\"-1\">\n            <span [ngClass]=\"{'text-info': !isBs4}\">\n              {{tz.label}}\n            </span>\n          </button>\n        </th>\n        <th>\n          <button type=\"button\" [disabled]=\"maxPos == timeZones.length - 1\"\n                  class=\"btn btn-default btn-secondary btn-sm pull-right\"\n                  (click)=\"move($event, 'next')\"\n                  tabindex=\"-1\">\n            <i class=\"glyphicon glyphicon-chevron-right\"></i>\n          </button>\n        </th>\n      </tr>\n      </thead>\n    </table>\n  ",
                    styles: ["\n    tr > th {\n      padding-top: 5px;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    TimezonePickerComponent.ctorParameters = function () { return [
        { type: DatePickerInnerComponent, },
        { type: DatepickerConfig, },
    ]; };
    return TimezonePickerComponent;
}());
//# sourceMappingURL=timezonepicker.component.js.map