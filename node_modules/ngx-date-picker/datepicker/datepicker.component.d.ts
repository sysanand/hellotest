import { EventEmitter, TemplateRef, ViewContainerRef, Renderer, ElementRef, OnInit, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DatePickerInnerComponent } from './datepicker-inner.component';
import { DatepickerConfig } from './datepicker.config';
import { DropdownState } from './dropdown.state';
import { ComponentLoaderFactory } from '../component-loader/component-loader.factory';
import { ComponentLoader } from '../component-loader/component-loader.class';
import { DropdownContainerComponent } from './dropdown-container.component';
import { Subscription } from 'rxjs/Subscription';
import { DateFormatter } from './date-formatter';
export declare const DATEPICKER_CONTROL_VALUE_ACCESSOR: any;
export declare class DatePickerComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private _elementRef;
    private _renderer;
    private _viewContainerRef;
    private _cis;
    private _state;
    placeholder: string;
    /** sets datepicker mode, supports: `day`, `month`, `year` */
    datepickerMode: string;
    /** default date to show if `ng-model` value is not specified */
    initDate: Date;
    /**  oldest selectable date */
    minDate: Date;
    /** latest selectable date */
    maxDate: Date;
    /** set lower datepicker mode, supports: `day`, `month`, `year` */
    minMode: string;
    /** sets upper datepicker mode, supports: `day`, `month`, `year` */
    maxMode: string;
    /** if false week numbers will be hidden */
    showWeeks: boolean;
    displayFormat: string;
    /** displayFormat of day in month */
    formatDay: string;
    /** displayFormat of month in year */
    formatMonth: string;
    /** displayFormat of year in year range */
    formatYear: string;
    /** displayFormat of day in week header */
    formatDayHeader: string;
    /** displayFormat of title when selecting day */
    formatDayTitle: string;
    /** displayFormat of title when selecting month */
    formatMonthTitle: string;
    /** starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday) */
    startingDay: number;
    /** number of years displayed in year selection */
    yearRange: number;
    /** if true only dates from the currently displayed month will be shown */
    onlyCurrentMonth: boolean;
    /** if true shortcut`s event propagation will be disabled */
    shortcutPropagation: boolean;
    /** number of months displayed in a single row of month picker */
    monthColLimit: number;
    /** number of years displayed in a single row of year picker */
    yearColLimit: number;
    /** array of custom css classes to be applied to targeted dates */
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    /** array of disabled dates */
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    /** set datepicker type, supports: `date`, `datetime` */
    type: 'date' | 'datetime';
    /** currently active date */
    activeDate: Date;
    disabled: any;
    required: any;
    readonly: any;
    selectionDone: EventEmitter<string>;
    /** callback to invoke when the activeDate is changed. */
    activeDateChange: EventEmitter<Date>;
    _datePicker: DatePickerInnerComponent;
    dropdownRef: TemplateRef<any>;
    dropdownMenu: ElementRef;
    onChange: any;
    onTouched: any;
    timezone: number;
    protected _isDisabled: boolean;
    protected _required: boolean;
    protected _readonly: boolean;
    protected _now: Date;
    protected _activeDate: Date;
    protected config: DatepickerConfig;
    protected _dropdown: ComponentLoader<DropdownContainerComponent>;
    protected _subscriptions: Subscription[];
    protected isOpen: boolean;
    protected dateFormatter: DateFormatter;
    constructor(config: DatepickerConfig, _elementRef: ElementRef, _renderer: Renderer, _viewContainerRef: ViewContainerRef, _cis: ComponentLoaderFactory, _state: DropdownState);
    ngOnInit(): void;
    ngOnDestroy(): void;
    configureOptions(): void;
    onUpdate(event: any): void;
    onSelectionDone(event: any): void;
    onActiveDateChange(event: Date): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    displayDate(): string;
    toggle(value?: boolean): void;
    show(): void;
    hide(): void;
    onDocumentClick(event: any): void;
    protected coerceBooleanProperty(value: any): boolean;
    protected isEmpty(value: any): boolean;
}
